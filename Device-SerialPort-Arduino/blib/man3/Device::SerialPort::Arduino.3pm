.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Device::SerialPort::Arduino 3pm"
.TH Device::SerialPort::Arduino 3pm "2012-02-17" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Device::SerialPort::Arduino \- A friendly way to interface Perl with your Arduino using Device::SerialPort
.SH "VERSION"
.IX Header "VERSION"
Version 0.07
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Device::SerialPort::Arduino;
\&
\&  my $Arduino = Device::SerialPort::Arduino\->new(
\&    port     => \*(Aq/dev/ttyACM0\*(Aq,
\&    baudrate => 9600,
\&
\&    databits => 8,
\&    parity   => \*(Aqnone\*(Aq,
\&  );
\&
\&  # Reading from Arduino via Serial
\&
\&  while (1) {
\&      print $Arduino\->receive(), "\en";
\&  }
\&
\&  # or with a delay
\&
\&  while (1) {
\&      print $Arduino\->receive(1), "\en";
\&  }
\&
\&  # Send something via Serial
\&
\&  $Arduino\->communicate(\*(Aqoh hi!!11\*(Aq)
\&    or die \*(AqWarning, empty string: \*(Aq, "$!\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Device::SerialPort::Arduino\*(C'\fR is a class which aims to be an easier
way to write Perl applications which easily communicate with Arduino.
If you'd like to create an application using this module you firstly
have to declare many parameters such as port, baudrate, databits etc.
Remember that, some parameters such as databits, parity and stopbits,
shouldn't be changed for a well serial communication with your Arduino.
.SH "METHODS"
.IX Header "METHODS"
Here are some methods which will be used to communicate with your device.
.ie n .IP "$Arduino\->\fIreceive()\fR" 4
.el .IP "\f(CW$Arduino\fR\->\fIreceive()\fR" 4
.IX Item "$Arduino->receive()"
The method \f(CW\*(C`receive\*(C'\fR checks if there's a stream of information via serial port
using the method \f(CW\*(C`lookfor\*(C'\fR contained into \f(CW\*(C`Device::SerialPort\*(C'\fR
You can also send via \f(CW\*(C`receive\*(C'\fR an integer parameter, if you'd like to delay
the recepit of information from your Arduino board.
.ie n .IP "$arduino\->communicate( $chars )" 4
.el .IP "\f(CW$arduino\fR\->communicate( \f(CW$chars\fR )" 4
.IX Item "$arduino->communicate( $chars )"
The method \f(CW\*(C`communicate\*(C'\fR simply sends to your Arduino board characters taken
as a parameter, using the method \f(CW\*(C`write\*(C'\fR of \f(CW\*(C`Device::SerialPort\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Simone 'Syxanash' Marzulli, \f(CW\*(C`<syxanash at cpan.org>\*(C'\fR
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Device::SerialPort ~ http://search.cpan.org/~cook/Device\-SerialPort\-1.04/SerialPort.pm
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Carp ~ http://search.cpan.org/~zefram/Carp\-1.25/lib/Carp.pm
.PP
Time::HiRes ~ http://search.cpan.org/~zefram/Time\-HiRes\-1.9725/HiRes.pm
.PP
http://arduino.cc/playground/Interfacing/PERL
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`syxanash at cpan.org\*(C'\fR, I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Device::SerialPort::Arduino
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Simone 'Syxanash' Marzulli.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
